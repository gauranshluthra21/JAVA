public class AddNodeInFrontOfLinkedList{
    class Node{    
        int data;    
        Node next;    
            
        public Node(int data) {    
            this.data = data;    
            this.next = null;    
        }    
    }    
     
    //Represent the head and tail of the singly linked list    
    public Node head = null;    
    public Node tail = null;    



        
    //addNode() will add a new node to the list    
    public void addNode(int data) {    
        //Create a new node    
        Node newNode = new Node(data);    
            
        //Checks if the list is empty    
        if(head == null) {    
            //If list is empty, both head and tail will point to new node    
            head = newNode;    
            tail = newNode;    
        }    
        else {    
            //newNode will be added after tail such that tail's next will point to newNode    
            tail.next = newNode;    
            //newNode will become new tail of the list    
            tail = newNode;    
        }    
    }    
        








    //  to add node in front



    /* This function is in LinkedList class. Inserts a
new Node at front of the list. This method is
defined inside LinkedList class shown above */
public void push(int new_data)
{
	/* 1 & 2: Allocate the Node &
			Put in the data*/
	Node new_node = new Node(new_data);

	/* 3. Make next of new Node as head */
	new_node.next = head;

	/* 4. Move the head to point to new Node */
	head = new_node;
}




public void display() {    
    //Node current will point to head    
    Node current = head;    
        
    if(head == null) {    
        System.out.println("List is empty");    
        return;    
    }    
    System.out.println("Nodes of singly linked list: ");    
    while(current != null) {    
        //Prints each node by incrementing pointer    
        System.out.print(current.data + " ");    
        current = current.next;    
    }    
    System.out.println();    
}  



public static void main(String[] args) {    
            
 AddNodeInFrontOfLinkedListsList = new AddNodeInFrontOfLinkedList();

    sList.addNode(2);    
    sList.addNode(4);    
    sList.addNode(6);    
    sList.addNode(8); 
    
    sList.display();

    sList.push(5);
    sList.display();
       

        
       


} 
}